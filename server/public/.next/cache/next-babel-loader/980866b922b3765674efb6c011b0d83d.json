{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { push } from 'react-router-redux';\nimport Router from 'next/router';\nimport api from '../shared/api/index';\nimport { SET_STATUS_TEXT, SET_REGISTER_LOADING_STATUS, SET_AUTH_LOADING_STATUS, SET_TOKEN, AUTH_LOGIN_USER_SUCCESS, AUTH_LOGIN_USER_FAILURE, REGISTER_USER_SUCCESS, CHECK_AUTH_FAILURE, CHECK_AUTH_SUCCESS, LOGOUT } from '../shared/constants/auth';\nexport const setStatusText = text => ({\n  type: SET_STATUS_TEXT,\n  payload: text\n});\nexport const logout = () => {\n  localStorage.removeItem('token');\n  return {\n    type: LOGOUT\n  };\n};\nexport const setRegisteringLoader = status => ({\n  type: SET_REGISTER_LOADING_STATUS,\n  payload: status\n});\nexport const getCurrentUser = () => api.auth.currentUser().then(res => {\n  console.log('res', res);\n}).catch(e => {\n  console.error('error getCurrenUser', _objectSpread({}, e));\n});\nexport const checkAuthSuccess = () => ({\n  type: CHECK_AUTH_SUCCESS\n});\nexport const checkAuthFailure = () => ({\n  type: CHECK_AUTH_FAILURE\n});\nexport const checkAuth = () => dispatch => {\n  const token = localStorage.getItem('token');\n  return api.auth.currentUser() // check that token is verificate\n  .then(res => {\n    //\n    dispatch(checkAuthSuccess());\n  }).catch(e => {\n    // to login page\n    console.error('Auth error', _objectSpread({}, e));\n    dispatch(checkAuthFailure());\n  });\n};\nexport const authLoginUserSuccess = token => {\n  localStorage.setItem('token', token);\n  return {\n    type: AUTH_LOGIN_USER_SUCCESS,\n    payload: token\n  };\n};\nexport const authLoginUserFailure = (status, text) => {\n  localStorage.removeItem('token');\n  return {\n    type: AUTH_LOGIN_USER_FAILURE,\n    payload: {\n      status,\n      text\n    }\n  };\n};\nexport const setAuthLoader = status => ({\n  type: SET_AUTH_LOADING_STATUS,\n  payload: status\n});\nexport const registerUserSuccess = () => ({\n  type: REGISTER_USER_SUCCESS\n});\nexport const registerUser = values => dispatch => {\n  dispatch(setRegisteringLoader(true));\n  return api.auth.register(values).then(res => {\n    // dispatch(setRegisteringLoader(false))\n    // dispatch(setStatusText({\n    //     statusText: 'Register is success',\n    //     statusType: 'success'\n    // }))\n    dispatch(registerUserSuccess());\n    return true;\n  });\n};\nexport const loginUser = values => dispatch => {\n  dispatch(setAuthLoader(true));\n  return api.auth.login(values).then(res => {\n    dispatch(authLoginUserSuccess(res.token)); // dispatch(push('/admin'));\n\n    Router.push('/admin');\n  }).catch(e => {\n    dispatch(authLoginUserFailure('error', 'Failed login'));\n  });\n};","map":{"version":3,"sources":["/usr/src/app/server/public/actions/auth.js"],"names":["Router","api","SET_STATUS_TEXT","SET_REGISTER_LOADING_STATUS","SET_AUTH_LOADING_STATUS","SET_TOKEN","AUTH_LOGIN_USER_SUCCESS","AUTH_LOGIN_USER_FAILURE","REGISTER_USER_SUCCESS","CHECK_AUTH_FAILURE","CHECK_AUTH_SUCCESS","LOGOUT","setStatusText","text","type","payload","logout","localStorage","removeItem","setRegisteringLoader","status","getCurrentUser","auth","currentUser","then","res","console","log","catch","e","error","checkAuthSuccess","checkAuthFailure","checkAuth","dispatch","token","getItem","authLoginUserSuccess","setItem","authLoginUserFailure","setAuthLoader","registerUserSuccess","registerUser","values","register","loginUser","login","push"],"mappings":"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","sourcesContent":["// import { push } from 'react-router-redux';\nimport Router from 'next/router';\nimport api from '../shared/api/index';\n\nimport {\n  SET_STATUS_TEXT,\n  SET_REGISTER_LOADING_STATUS,\n  SET_AUTH_LOADING_STATUS,\n  SET_TOKEN,\n  AUTH_LOGIN_USER_SUCCESS,\n  AUTH_LOGIN_USER_FAILURE,\n  REGISTER_USER_SUCCESS,\n  CHECK_AUTH_FAILURE,\n  CHECK_AUTH_SUCCESS,\n  LOGOUT,\n} from '../shared/constants/auth';\n\nexport const setStatusText = text => ({\n  type: SET_STATUS_TEXT,\n  payload: text,\n});\n\nexport const logout = () => {\n  localStorage.removeItem('token');\n  return {\n    type: LOGOUT,\n  };\n};\n\nexport const setRegisteringLoader = status => ({\n  type: SET_REGISTER_LOADING_STATUS,\n  payload: status,\n});\n\nexport const getCurrentUser = () => api.auth.currentUser()\n  .then((res) => {\n    console.log('res', res);\n  })\n  .catch((e) => {\n    console.error('error getCurrenUser', { ...e });\n  });\n\nexport const checkAuthSuccess = () => ({\n  type: CHECK_AUTH_SUCCESS,\n});\n\nexport const checkAuthFailure = () => ({\n  type: CHECK_AUTH_FAILURE,\n});\n\nexport const checkAuth = () => (dispatch) => {\n  const token = localStorage.getItem('token');\n\n  return api.auth.currentUser() // check that token is verificate\n    .then((res) => { //\n      dispatch(checkAuthSuccess());\n    })\n    .catch((e) => { // to login page\n      console.error('Auth error', { ...e });\n      dispatch(checkAuthFailure());\n    });\n};\n\nexport const authLoginUserSuccess = (token) => {\n  localStorage.setItem('token', token);\n  return {\n    type: AUTH_LOGIN_USER_SUCCESS,\n    payload: token,\n  };\n};\n\nexport const authLoginUserFailure = (status, text) => {\n  localStorage.removeItem('token');\n  return {\n    type: AUTH_LOGIN_USER_FAILURE,\n    payload: {\n      status,\n      text,\n    },\n  };\n};\n\nexport const setAuthLoader = status => ({\n  type: SET_AUTH_LOADING_STATUS,\n  payload: status,\n});\n\nexport const registerUserSuccess = () => ({\n  type: REGISTER_USER_SUCCESS,\n});\n\nexport const registerUser = values => (dispatch) => {\n  dispatch(setRegisteringLoader(true));\n  return api.auth.register(values)\n    .then((res) => {\n      // dispatch(setRegisteringLoader(false))\n      // dispatch(setStatusText({\n      //     statusText: 'Register is success',\n      //     statusType: 'success'\n      // }))\n      dispatch(registerUserSuccess());\n      return true;\n    });\n};\n\nexport const loginUser = values => (dispatch) => {\n  dispatch(setAuthLoader(true));\n  return api.auth.login(values)\n    .then((res) => {\n      dispatch(authLoginUserSuccess(res.token));\n      // dispatch(push('/admin'));\n      Router.push('/admin');\n    })\n    .catch((e) => {\n      dispatch(authLoginUserFailure('error', 'Failed login'));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}