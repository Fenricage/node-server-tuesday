{"ast":null,"code":"import { Map, fromJS } from 'immutable';\nimport { AUTH_LOGIN_USER_FAILURE, AUTH_LOGIN_USER_SUCCESS, CHECK_AUTH_FAILURE, CHECK_AUTH_SUCCESS, LOGOUT, REGISTER_USER_SUCCESS, SET_AUTH_LOADING_STATUS, SET_REGISTER_LOADING_STATUS, SET_STATUS_TEXT, SET_TOKEN } from '../shared/constants/auth';\nconst initialState = fromJS({\n  token: null,\n  isAuthenticated: false,\n  isAuthenticating: false,\n  isRegistrering: false,\n  isRegistred: false,\n  statusAuth: {\n    statusText: '',\n    statusType: ''\n  },\n  currentUserInfo: null\n});\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_LOADING_STATUS:\n      return state.setIn(['isAuthenticating'], action.payload);\n\n    case SET_REGISTER_LOADING_STATUS:\n      return state.setIn(['isRegistrering'], action.payload);\n\n    case SET_STATUS_TEXT:\n      return state.setIn(['statusAuth'], action.payload);\n\n    case SET_TOKEN:\n      return state.setIn(['token'], action.payload);\n\n    case AUTH_LOGIN_USER_SUCCESS:\n      return state.merge({\n        token: action.payload,\n        isAuthenticated: true,\n        isAuthenticating: false,\n        statusAuth: new Map({\n          statusText: '',\n          statusType: ''\n        })\n      });\n\n    case AUTH_LOGIN_USER_FAILURE:\n      return state.merge({\n        token: null,\n        isAuthenticated: false,\n        isAuthenticating: false,\n        statusAuth: new Map({\n          statusText: action.payload.text,\n          statusType: action.payload.status\n        })\n      });\n\n    case REGISTER_USER_SUCCESS:\n      return state.merge({\n        isRegistrering: false,\n        statusAuth: new Map({\n          statusText: 'Register is success',\n          statusType: 'success'\n        })\n      });\n\n    case CHECK_AUTH_SUCCESS:\n      return state.setIn(['isAuthenticated'], true);\n\n    case CHECK_AUTH_FAILURE:\n      return state.merge({\n        token: null,\n        isAuthenticated: false\n      });\n\n    case LOGOUT:\n      return state.merge({\n        token: null,\n        isAuthenticated: false,\n        currentUserInfo: null\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/usr/src/app/server/public/reducers/auth.js"],"names":["Map","fromJS","AUTH_LOGIN_USER_FAILURE","AUTH_LOGIN_USER_SUCCESS","CHECK_AUTH_FAILURE","CHECK_AUTH_SUCCESS","LOGOUT","REGISTER_USER_SUCCESS","SET_AUTH_LOADING_STATUS","SET_REGISTER_LOADING_STATUS","SET_STATUS_TEXT","SET_TOKEN","initialState","token","isAuthenticated","isAuthenticating","isRegistrering","isRegistred","statusAuth","statusText","statusType","currentUserInfo","state","action","type","setIn","payload","merge","text","status"],"mappings":"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","sourcesContent":["import { Map, fromJS } from 'immutable';\nimport {\n  AUTH_LOGIN_USER_FAILURE,\n  AUTH_LOGIN_USER_SUCCESS,\n  CHECK_AUTH_FAILURE,\n  CHECK_AUTH_SUCCESS,\n  LOGOUT,\n  REGISTER_USER_SUCCESS,\n  SET_AUTH_LOADING_STATUS,\n  SET_REGISTER_LOADING_STATUS,\n  SET_STATUS_TEXT,\n  SET_TOKEN,\n} from '../shared/constants/auth';\n\nconst initialState = fromJS({\n  token: null,\n  isAuthenticated: false,\n  isAuthenticating: false,\n  isRegistrering: false,\n  isRegistred: false,\n  statusAuth: {\n    statusText: '',\n    statusType: '',\n  },\n  currentUserInfo: null,\n});\n\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n\n    case SET_AUTH_LOADING_STATUS:\n      return state.setIn(['isAuthenticating'], action.payload);\n    case SET_REGISTER_LOADING_STATUS:\n      return state.setIn(['isRegistrering'], action.payload);\n    case SET_STATUS_TEXT:\n      return state.setIn(['statusAuth'], action.payload);\n    case SET_TOKEN:\n      return state.setIn(['token'], action.payload);\n    case AUTH_LOGIN_USER_SUCCESS:\n      return state.merge({\n        token: action.payload,\n        isAuthenticated: true,\n        isAuthenticating: false,\n        statusAuth: new Map({\n          statusText: '',\n          statusType: '',\n        }),\n      });\n    case AUTH_LOGIN_USER_FAILURE:\n      return state.merge({\n        token: null,\n        isAuthenticated: false,\n        isAuthenticating: false,\n        statusAuth: new Map({\n          statusText: action.payload.text,\n          statusType: action.payload.status,\n        }),\n      });\n    case REGISTER_USER_SUCCESS:\n      return state.merge({\n        isRegistrering: false,\n        statusAuth: new Map({\n          statusText: 'Register is success',\n          statusType: 'success',\n        }),\n      });\n    case CHECK_AUTH_SUCCESS:\n      return state.setIn(['isAuthenticated'], true);\n    case CHECK_AUTH_FAILURE:\n      return state.merge({\n        token: null,\n        isAuthenticated: false,\n      });\n    case LOGOUT:\n      return state.merge({\n        token: null,\n        isAuthenticated: false,\n        currentUserInfo: null,\n      });\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}