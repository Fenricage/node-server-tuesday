{"ast":null,"code":"import { Map, fromJS, List } from 'immutable';\nimport { ARTICLES_FETCH, ARTICLES_FETCH_FAILURE, ARTICLES_FETCH_SUCCESS, ARTICLES_DELETE_ARTICLE_SUCCESS, ARTICLES_DELETE_ARTICLE_FAILURE, ARTICLES_DELETE_ARTICLE } from '../shared/constants/articles'; // fromJS преобразует весь нижний обхект в immutable объекты\n// массивы в List\n// объекты в Map\n\nexport var initialState = fromJS({\n  data: {},\n  error: null,\n  isDeleting: [],\n  isLoaded: false\n});\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ARTICLES_FETCH:\n      return state.set('isLoaded', false);\n\n    case ARTICLES_FETCH_SUCCESS:\n      return state.merge({\n        data: action.payload,\n        isLoaded: true\n      });\n\n    case ARTICLES_FETCH_FAILURE:\n      return state.merge({\n        error: action.payload,\n        isLoaded: true\n      });\n\n    case ARTICLES_DELETE_ARTICLE:\n      return state.set('isDeleting', action.payload);\n\n    case ARTICLES_DELETE_ARTICLE_SUCCESS:\n      return state.set('isDeleting', action.payload.isDeleting).setIn(['data', 'records'], action.payload.updatedArticles);\n\n    case ARTICLES_DELETE_ARTICLE_FAILURE:\n      return state.merge({\n        error: action.payload.e,\n        isDeleting: action.payload.isDeleting\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/usr/src/app/server/public/reducers/articles.js"],"names":["Map","fromJS","List","ARTICLES_FETCH","ARTICLES_FETCH_FAILURE","ARTICLES_FETCH_SUCCESS","ARTICLES_DELETE_ARTICLE_SUCCESS","ARTICLES_DELETE_ARTICLE_FAILURE","ARTICLES_DELETE_ARTICLE","initialState","data","error","isDeleting","isLoaded","state","action","type","set","merge","payload","setIn","updatedArticles","e"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,QAAkC,WAAlC;AACA,SACEC,cADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,+BAJF,EAKEC,+BALF,EAMEC,uBANF,QAOO,8BAPP,C,CASA;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAGR,MAAM,CAAC;AACjCS,EAAAA,IAAI,EAAE,EAD2B;AAEjCC,EAAAA,KAAK,EAAE,IAF0B;AAGjCC,EAAAA,UAAU,EAAE,EAHqB;AAIjCC,EAAAA,QAAQ,EAAE;AAJuB,CAAD,CAA3B;AAOP,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,cAAL;AACE,aAAOW,KAAK,CAACG,GAAN,CAAU,UAAV,EAAsB,KAAtB,CAAP;;AACF,SAAKZ,sBAAL;AACE,aAAOS,KAAK,CAACI,KAAN,CAAY;AACjBR,QAAAA,IAAI,EAAEK,MAAM,CAACI,OADI;AAEjBN,QAAAA,QAAQ,EAAE;AAFO,OAAZ,CAAP;;AAIF,SAAKT,sBAAL;AACE,aAAOU,KAAK,CAACI,KAAN,CAAY;AACjBP,QAAAA,KAAK,EAAEI,MAAM,CAACI,OADG;AAEjBN,QAAAA,QAAQ,EAAE;AAFO,OAAZ,CAAP;;AAIF,SAAKL,uBAAL;AACE,aAAOM,KAAK,CAACG,GAAN,CAAU,YAAV,EAAwBF,MAAM,CAACI,OAA/B,CAAP;;AACF,SAAKb,+BAAL;AACE,aAAOQ,KAAK,CACTG,GADI,CACA,YADA,EACcF,MAAM,CAACI,OAAP,CAAeP,UAD7B,EAEJQ,KAFI,CAEE,CAAC,MAAD,EAAS,SAAT,CAFF,EAEuBL,MAAM,CAACI,OAAP,CAAeE,eAFtC,CAAP;;AAGF,SAAKd,+BAAL;AACE,aAAOO,KAAK,CAACI,KAAN,CAAY;AACjBP,QAAAA,KAAK,EAAEI,MAAM,CAACI,OAAP,CAAeG,CADL;AAEjBV,QAAAA,UAAU,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAFV,OAAZ,CAAP;;AAIF;AACE,aAAOE,KAAP;AAzBJ;AA2BD,CA5BD","sourcesContent":["import { Map, fromJS, List } from 'immutable';\nimport {\n  ARTICLES_FETCH,\n  ARTICLES_FETCH_FAILURE,\n  ARTICLES_FETCH_SUCCESS,\n  ARTICLES_DELETE_ARTICLE_SUCCESS,\n  ARTICLES_DELETE_ARTICLE_FAILURE,\n  ARTICLES_DELETE_ARTICLE,\n} from '../shared/constants/articles';\n\n// fromJS преобразует весь нижний обхект в immutable объекты\n// массивы в List\n// объекты в Map\nexport const initialState = fromJS({\n  data: {},\n  error: null,\n  isDeleting: [],\n  isLoaded: false,\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ARTICLES_FETCH:\n      return state.set('isLoaded', false);\n    case ARTICLES_FETCH_SUCCESS:\n      return state.merge({\n        data: action.payload,\n        isLoaded: true,\n      });\n    case ARTICLES_FETCH_FAILURE:\n      return state.merge({\n        error: action.payload,\n        isLoaded: true,\n      });\n    case ARTICLES_DELETE_ARTICLE:\n      return state.set('isDeleting', action.payload);\n    case ARTICLES_DELETE_ARTICLE_SUCCESS:\n      return state\n        .set('isDeleting', action.payload.isDeleting)\n        .setIn(['data', 'records'], action.payload.updatedArticles);\n    case ARTICLES_DELETE_ARTICLE_FAILURE:\n      return state.merge({\n        error: action.payload.e,\n        isDeleting: action.payload.isDeleting,\n      });\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}