{"ast":null,"code":"import { fromJS } from 'immutable';\nimport { TAGS_INIT, TAGS_FETCH_FAILURE, TAGS_FETCH_SUCCESS, TAGS_DELETE_TAG, TAGS_DELETE_TAG_FAILURE, TAGS_DELETE_TAG_SUCCESS, TAGS_CREATE_FETCH, TAGS_CREATE_FETCH_FAILURE, TAGS_CREATE_FETCH_SUCCESS, TAGS_PATCH_FETCH, TAGS_PATCH_FETCH_FAILURE, TAGS_PATCH_FETCH_SUCCESS } from '../shared/constants/tags';\nconst initialState = fromJS({\n  data: {},\n  error: null,\n  isLoaded: false,\n  isCreating: false,\n  isPatching: false,\n  isDeleting: []\n});\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case TAGS_INIT:\n      return initialState;\n\n    case TAGS_FETCH_SUCCESS:\n      return state.merge({\n        data: action.payload,\n        isLoaded: true\n      });\n\n    case TAGS_FETCH_FAILURE:\n      return state.merge({\n        error: action.payload,\n        isLoaded: true\n      });\n\n    case TAGS_CREATE_FETCH:\n      return state.set('isCreating', true);\n\n    case TAGS_CREATE_FETCH_SUCCESS:\n      return state.set('isCreating', false);\n    //  TODO передать объект ошибки и засетить\n\n    case TAGS_CREATE_FETCH_FAILURE:\n      return state.set('isCreating', false);\n\n    case TAGS_PATCH_FETCH:\n      return state.set('isPatching', true);\n\n    case TAGS_PATCH_FETCH_SUCCESS:\n      return state.set('isPatching', false);\n\n    case TAGS_PATCH_FETCH_FAILURE:\n      return state.set('isPatching', false);\n\n    case TAGS_DELETE_TAG:\n      return state.set('isDeleting', action.payload);\n\n    case TAGS_DELETE_TAG_SUCCESS:\n      return state.set('isDeleting', action.payload);\n\n    case TAGS_DELETE_TAG_FAILURE:\n      return state.set('isDeleting', action.payload);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/usr/src/app/server/public/reducers/tags.js"],"names":["fromJS","TAGS_INIT","TAGS_FETCH_FAILURE","TAGS_FETCH_SUCCESS","TAGS_DELETE_TAG","TAGS_DELETE_TAG_FAILURE","TAGS_DELETE_TAG_SUCCESS","TAGS_CREATE_FETCH","TAGS_CREATE_FETCH_FAILURE","TAGS_CREATE_FETCH_SUCCESS","TAGS_PATCH_FETCH","TAGS_PATCH_FETCH_FAILURE","TAGS_PATCH_FETCH_SUCCESS","initialState","data","error","isLoaded","isCreating","isPatching","isDeleting","state","action","type","merge","payload","set"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,SACEC,SADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,eAJF,EAKEC,uBALF,EAMEC,uBANF,EAOEC,iBAPF,EAQEC,yBARF,EASEC,yBATF,EAUEC,gBAVF,EAWEC,wBAXF,EAYEC,wBAZF,QAaO,0BAbP;AAeA,MAAMC,YAAY,GAAGb,MAAM,CAAC;AAC1Bc,EAAAA,IAAI,EAAE,EADoB;AAE1BC,EAAAA,KAAK,EAAE,IAFmB;AAG1BC,EAAAA,QAAQ,EAAE,KAHgB;AAI1BC,EAAAA,UAAU,EAAE,KAJc;AAK1BC,EAAAA,UAAU,EAAE,KALc;AAM1BC,EAAAA,UAAU,EAAE;AANc,CAAD,CAA3B;AASA,gBAAe,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKrB,SAAL;AACE,aAAOY,YAAP;;AAEF,SAAKV,kBAAL;AACE,aAAOiB,KAAK,CAACG,KAAN,CAAY;AACjBT,QAAAA,IAAI,EAAEO,MAAM,CAACG,OADI;AAEjBR,QAAAA,QAAQ,EAAE;AAFO,OAAZ,CAAP;;AAIF,SAAKd,kBAAL;AACE,aAAOkB,KAAK,CAACG,KAAN,CAAY;AACjBR,QAAAA,KAAK,EAAEM,MAAM,CAACG,OADG;AAEjBR,QAAAA,QAAQ,EAAE;AAFO,OAAZ,CAAP;;AAIF,SAAKT,iBAAL;AACE,aAAOa,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwB,IAAxB,CAAP;;AACF,SAAKhB,yBAAL;AACE,aAAOW,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwB,KAAxB,CAAP;AACF;;AACA,SAAKjB,yBAAL;AACE,aAAOY,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwB,KAAxB,CAAP;;AACF,SAAKf,gBAAL;AACE,aAAOU,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwB,IAAxB,CAAP;;AACF,SAAKb,wBAAL;AACE,aAAOQ,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwB,KAAxB,CAAP;;AACF,SAAKd,wBAAL;AACE,aAAOS,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwB,KAAxB,CAAP;;AACF,SAAKrB,eAAL;AACE,aAAOgB,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwBJ,MAAM,CAACG,OAA/B,CAAP;;AACF,SAAKlB,uBAAL;AACE,aAAOc,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwBJ,MAAM,CAACG,OAA/B,CAAP;;AACF,SAAKnB,uBAAL;AACE,aAAOe,KAAK,CAACK,GAAN,CAAU,YAAV,EAAwBJ,MAAM,CAACG,OAA/B,CAAP;;AACF;AACE,aAAOJ,KAAP;AAlCJ;AAoCD,CArCD","sourcesContent":["import { fromJS } from 'immutable';\nimport {\n  TAGS_INIT,\n  TAGS_FETCH_FAILURE,\n  TAGS_FETCH_SUCCESS,\n  TAGS_DELETE_TAG,\n  TAGS_DELETE_TAG_FAILURE,\n  TAGS_DELETE_TAG_SUCCESS,\n  TAGS_CREATE_FETCH,\n  TAGS_CREATE_FETCH_FAILURE,\n  TAGS_CREATE_FETCH_SUCCESS,\n  TAGS_PATCH_FETCH,\n  TAGS_PATCH_FETCH_FAILURE,\n  TAGS_PATCH_FETCH_SUCCESS,\n} from '../shared/constants/tags';\n\nconst initialState = fromJS({\n  data: {},\n  error: null,\n  isLoaded: false,\n  isCreating: false,\n  isPatching: false,\n  isDeleting: [],\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case TAGS_INIT:\n      return initialState;\n\n    case TAGS_FETCH_SUCCESS:\n      return state.merge({\n        data: action.payload,\n        isLoaded: true,\n      });\n    case TAGS_FETCH_FAILURE:\n      return state.merge({\n        error: action.payload,\n        isLoaded: true,\n      });\n    case TAGS_CREATE_FETCH:\n      return state.set('isCreating', true);\n    case TAGS_CREATE_FETCH_SUCCESS:\n      return state.set('isCreating', false);\n    //  TODO передать объект ошибки и засетить\n    case TAGS_CREATE_FETCH_FAILURE:\n      return state.set('isCreating', false);\n    case TAGS_PATCH_FETCH:\n      return state.set('isPatching', true);\n    case TAGS_PATCH_FETCH_SUCCESS:\n      return state.set('isPatching', false);\n    case TAGS_PATCH_FETCH_FAILURE:\n      return state.set('isPatching', false);\n    case TAGS_DELETE_TAG:\n      return state.set('isDeleting', action.payload);\n    case TAGS_DELETE_TAG_SUCCESS:\n      return state.set('isDeleting', action.payload);\n    case TAGS_DELETE_TAG_FAILURE:\n      return state.set('isDeleting', action.payload);\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}